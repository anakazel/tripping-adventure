<?xml version="1.0" encoding="UTF-8"?>
<process xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable" xmlns:bpws="http://docs.oasis-open.org/wsbpel/2.0/process/executable" xmlns:dir="http://www.wscomposition.org/Directions/" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:for="http://www.wscomposition.org/Forecast/" xmlns:ode="http://www.apache.org/ode/type/extension" xmlns:pla="http://www.wscomposition.org/Places/" xmlns:tns="http://travel" xmlns:types="http://ode/bpel/types" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:sea="http://www.wscomposition.org/Search/" name="Travel" targetNamespace="http://travel" suppressJoinFailure="yes" queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0" expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0">
   <!-- Import the client WSDL -->
   <import location="TravelArtifacts.wsdl" namespace="http://travel" importType="http://schemas.xmlsoap.org/wsdl/" />
   <!-- ================================================================= -->
   <!-- PARTNERLINKS -->
   <!-- List of services participating in this BPEL process -->
   <!-- ================================================================= -->
   <partnerLinks>
      <!-- The 'client' role represents the requester of this service. -->
      <partnerLink name="TravelClient" partnerLinkType="tns:Travel" myRole="TravelProvider" />
      <partnerLink name="DirectionsPL" partnerLinkType="tns:DirectionsPLT" partnerRole="DirectionsRole" />
      <partnerLink name="PlacesPL" partnerLinkType="tns:PlacesPLT" partnerRole="PlacesRole" />
      <partnerLink name="ForecastPL" partnerLinkType="tns:ForecastPLT" partnerRole="ForecastRole" />
      <partnerLink name="SearchPL" partnerLinkType="tns:SearchPLT" partnerRole="SearchRole" />
   </partnerLinks>
   <!-- ================================================================= -->
   <!-- VARIABLES -->
   <!-- List of messages and XML documents used within this BPEL process -->
   <!-- ================================================================= -->
   <variables>
      <variable name="TravelInput" messageType="tns:TravelRequestMessage" />
      <variable name="TravelOutput" messageType="tns:TravelResponseMessage" />
      <variable name="DirectionsRequest" messageType="dir:DirectionsRequest" />
      <variable name="DirectionsResponse" messageType="dir:DirectionsRequestResponse" />
      <variable name="PlacesRequest" messageType="pla:PlacesRequest" />
      <variable name="PlacesResponse" messageType="pla:PlacesRequestResponse" />
      <variable name="ForecastRequest" messageType="for:ForecastRequest" />
      <variable name="ForecastResponse" messageType="for:ForecastRequestResponse" />
      <variable name="SearchRequest" messageType="sea:SearchRequest" />
      <variable name="SearchResponse" messageType="sea:SearchRequestResponse" />
   </variables>
   <!-- ================================================================= -->
   <!-- ORCHESTRATION LOGIC -->
   <!-- Set of activities coordinating the flow of messages across the -->
   <!-- services integrated within this business process -->
   <!-- ================================================================= -->
   <sequence name="MainSequence">
      <!-- 1. Get the response from directions service -->
      <!-- Receive input from requester. Note: This maps to operation directionsefined 
         in Travel.wsdl -->
      <!-- Generate reply to synchronous request -->
      <receive name="InputReceive" partnerLink="TravelClient" portType="tns:Travel" operation="getInfo" variable="TravelInput" createInstance="yes" />
      <assign validate="no" name="InitialAssign">
         <copy>
            <from part="origin" variable="TravelInput" />
            <to part="origin" variable="DirectionsRequest" />
         </copy>
         <copy>
            <from part="destination" variable="TravelInput" />
            <to part="destination" variable="DirectionsRequest" />
         </copy>
         <copy>
            <from part="travelMode" variable="TravelInput"/>
            <to part="mode" variable="DirectionsRequest"/>
         </copy>
         <!-- bind the forecast request -->
         <copy>
            <from part="destination" variable="TravelInput" />
            <to part="q" variable="ForecastRequest" />
         </copy>
         <copy>
            <from part="forecastUnits" variable="TravelInput"/>
            <to part="units" variable="ForecastRequest"/>
         </copy>
         <copy>
            <from part="forecastDays" variable="TravelInput"/>
            <to part="cnt" variable="ForecastRequest"/>
         </copy>
         <!-- custom search engine key based on google acount -->
         <copy>
               <from part="images" variable="TravelInput"/>
               <to part="num" variable="SearchRequest" />
         </copy>
         <copy>
            <from part="destination" variable="TravelInput" />
            <to part="q" variable="SearchRequest" />
         </copy>
      </assign>
      <flow name="ParallelFlow">
         <sequence name="DirectionsAndPlacesSequence">
            <!-- Invocation of Directions ws-->
            <invoke name="InvokeDirections" partnerLink="DirectionsPL" operation="DirectionsRequest" portType="dir:Directions" inputVariable="DirectionsRequest" outputVariable="DirectionsResponse" />
            <assign validate="no" name="AssignOutputToInputPlaces">
               <copy>
                  <!-- Will retrieve the destination location coordinates in lang/lat needed for Places WS as input -->
                  <from>concat($DirectionsResponse//leg/end_location/lat, ',', $DirectionsResponse//leg/end_location/lng)</from>
                  <to>$PlacesRequest.location</to>
               </copy>
               <copy>
                  <from part="objectiveTypes" variable="TravelInput" />
                  <to part="types" variable="PlacesRequest" />
               </copy>
               <copy>
                  <from part="objectiveRadius" variable="TravelInput" />
                  <to part="radius" variable="PlacesRequest" />
               </copy>
            </assign>
            <!-- Invocation of Places ws -->
            <invoke name="InvokePlaces" partnerLink="PlacesPL" operation="PlacesRequest" portType="pla:Places" inputVariable="PlacesRequest" outputVariable="PlacesResponse" />
         </sequence>
         <!-- Invocation of Forecast ws -->
         <sequence name="ForecastSequence">
            <invoke name="InvokeForecast" partnerLink="ForecastPL" operation="ForecastRequest" portType="for:Forecast" inputVariable="ForecastRequest" outputVariable="ForecastResponse" />
         </sequence>
         <!-- Invocation of Search ws -->
         <sequence name="SearchSequence">
            <invoke name="InvokeSearch" partnerLink="SearchPL" operation="SearchRequest" portType="sea:Search" inputVariable="SearchRequest" outputVariable="SearchResponse" />
         </sequence>
      </flow>
      <!-- ================================================================= -->
      <!-- RESPONSES CONCATENATION -->
      <!-- ================================================================= -->
      <sequence name="MessageCompositionSequence">
         <assign validate="no" name="FinalAssign">
            <copy>
               <from>
                  <!-- Initialization so the insert-after will not fail -->
                  <literal>'Response is OK!'</literal>
               </from>
               <to>$TravelOutput.TravelResponse</to>
            </copy>
             <copy>
               <from>ode:insert-after($TravelOutput//TravelResponse,$DirectionsResponse/DirectionsResponse)</from>
               <to>$TravelOutput.TravelResponse</to>
            </copy>
            <copy>
               <from>ode:insert-after($TravelOutput/TravelResponse/DirectionsResponse,$PlacesResponse//PlacesResponse)</from>
               <to>$TravelOutput.TravelResponse</to>
            </copy>
            <copy>
               <from>ode:insert-after($TravelOutput//PlacesResponse,$ForecastResponse/ForecastResponse)</from>
               <to>$TravelOutput.TravelResponse</to>
            </copy>
            <copy>
               <from>ode:insert-after($TravelOutput//ForecastResponse,$SearchResponse/SearchResponse)</from>
               <to>$TravelOutput.TravelResponse</to>
            </copy>
            <copy>
               <from>ode:delete($TravelOutput/TravelResponse/TravelResponse)</from>
               <to>$TravelOutput.TravelResponse</to>
            </copy>
         </assign>
      </sequence>
      <!-- Final bpel process reply -->
      <reply name="ReplyOutput" partnerLink="TravelClient" portType="tns:Travel" operation="getInfo" variable="TravelOutput" />
   </sequence>
</process>