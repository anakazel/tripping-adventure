<?xml version="1.0" encoding="UTF-8"?>
<process xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable" xmlns:bpws="http://docs.oasis-open.org/wsbpel/2.0/process/executable" xmlns:dir="http://www.wscomposition.org/Directions/" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:ode="http://www.apache.org/ode/type/extension" xmlns:pla="http://www.wscomposition.org/Places/" xmlns:tns="http://composer" xmlns:types="http://ode/bpel/types" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:you="http://www.wscomposition.org/Youtube/" name="Composer" targetNamespace="http://composer" suppressJoinFailure="yes" queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0" expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0">
   <!-- Import the client WSDL -->
   <import location="ComposerArtifacts.wsdl" namespace="http://composer" importType="http://schemas.xmlsoap.org/wsdl/" />
   <!-- ================================================================= -->
   <!-- PARTNERLINKS -->
   <!-- List of services participating in this BPEL process -->
   <!-- ================================================================= -->
   <partnerLinks>
      <!-- The 'client' role represents the requester of this service. -->
      <partnerLink name="ComposerClient" partnerLinkType="tns:Composer" myRole="ComposerProvider" />
      <partnerLink name="DirectionsPL" partnerLinkType="tns:DirectionsPLT" partnerRole="DirectionsRole" />
      <partnerLink name="PlacesPL" partnerLinkType="tns:PlacesPLT" partnerRole="PlacesRole" />
      <partnerLink name="YoutubePL" partnerLinkType="tns:YoutubePLT" partnerRole="YoutubeRole" />
   </partnerLinks>
   <!-- ================================================================= -->
   <!-- VARIABLES -->
   <!-- List of messages and XML documents used within this BPEL process -->
   <!-- ================================================================= -->
   <variables>
      <variable name="ComposerInput" messageType="tns:ComposerRequestMessage" />
      <variable name="ComposerOutput" messageType="tns:ComposerResponseMessage">
         <from>1</from>
      </variable>
      <variable name="DirectionsRequest" messageType="dir:Request" />
      <variable name="DirectionsResponse" messageType="dir:Response" />
      <variable name="PlacesRequest" messageType="pla:Request" />
      <variable name="PlacesResponse" messageType="pla:Response" />
      <variable name="YoutubeRequest" messageType="you:Request" />
      <variable name="YoutubeResponse" messageType="you:Response" />
   </variables>
   <!-- ================================================================= -->
   <!-- ORCHESTRATION LOGIC -->
   <!-- Set of activities coordinating the flow of messages across the -->
   <!-- services integrated within this business process -->
   <!-- ================================================================= -->
   <sequence name="main">
      <!-- 1. Get the response from directions service -->
      <!-- Receive input from requester. Note: This maps to operation directionsefined 
         in Composer.wsdl -->
      <!-- Generate reply to synchronous request -->
      <receive name="receiveInput" partnerLink="ComposerClient" portType="tns:Composer" operation="process" variable="ComposerInput" createInstance="yes" />
      <assign validate="no" name="AssignInputToDirections">
         <copy>
            <from part="origin" variable="ComposerInput" />
            <to part="origin" variable="DirectionsRequest" />
         </copy>
         <copy>
            <from part="sensor" variable="ComposerInput" />
            <to part="sensor" variable="DirectionsRequest" />
         </copy>
         <copy>
            <from part="destination" variable="ComposerInput" />
            <to part="destination" variable="DirectionsRequest" />
         </copy>
         <!-- also assign youtube thingie -->
         <copy>
            <from part="destination" variable="ComposerInput" />
            <to part="q" variable="YoutubeRequest" />
         </copy>
      </assign>
      <flow name="leFLow">
         <sequence name="DirectionsAndPlacesSequence">
            <!-- Invocation of Directions ws-->
            <invoke name="InvokeDirections" partnerLink="DirectionsPL" operation="xml" portType="dir:Directions" inputVariable="DirectionsRequest" outputVariable="DirectionsResponse" />
            <assign validate="no" name="AssignOutputToInputPlaces">
               <copy>
                  <!-- Will retrieve the destination location coordinates in lang/lat needed for Places WS as input -->
                  <from>concat($DirectionsResponse//leg/end_location/lat, ',', $DirectionsResponse//leg/end_location/lng)</from>
                  <to>$PlacesRequest.location</to>
               </copy>
               <copy>
                  <from part="sensor" variable="ComposerInput" />
                  <to part="sensor" variable="PlacesRequest" />
               </copy>
               <copy>
                  <from part="types" variable="ComposerInput" />
                  <to part="types" variable="PlacesRequest" />
               </copy>
               <copy>
                  <from part="key" variable="ComposerInput" />
                  <to part="key" variable="PlacesRequest" />
               </copy>
               <copy>
                  <from part="radius" variable="ComposerInput" />
                  <to part="radius" variable="PlacesRequest" />
               </copy>
            </assign>
            <!-- Invocation of Places ws -->
            <invoke name="InvokePlaces" partnerLink="PlacesPL" operation="xml" portType="pla:Places" inputVariable="PlacesRequest" outputVariable="PlacesResponse" />
         </sequence>
         <!-- Invocation of Youtube ws -->
         <sequence name="YoutubeSequence">
            <invoke name="InvokeYoutube" partnerLink="YoutubePL" operation="videos" portType="you:Youtube" inputVariable="YoutubeRequest" outputVariable="YoutubeResponse" />
         </sequence>
      </flow>
      <!-- ================================================================= -->
      <!-- RESPONSES CONCATENATION -->
      <!-- ================================================================= -->
      <sequence name="MessageCompositionSequence">
         <assign validate="no" name="ComposeMessages">
            <copy>
               <from>
                  <!-- Initialization so the insert-after will not fail -->
                  <literal>'Response is OK!'</literal>
               </from>
               <to>$ComposerOutput.response</to>
            </copy>
            <copy>
               <from>ode:insert-after($ComposerOutput/response,$DirectionsResponse/dir_response)</from>
               <to>$ComposerOutput.response</to>
            </copy>
            <copy>
               <from>ode:insert-after($ComposerOutput//dir_response,$PlacesResponse/pla_response)</from>
               <to>$ComposerOutput.response</to>
            </copy>
            <copy>
               <from>ode:insert-after($ComposerOutput//pla_response,$YoutubeResponse/you_response)</from>
               <to>$ComposerOutput.response</to>
            </copy>
            cleanup the initialization
            <copy>
               <from>ode:delete($ComposerOutput/response/response)</from>
               <to>$ComposerOutput.response</to>
            </copy>
         </assign>
      </sequence>
      <!-- Final bpel process reply -->
      <reply name="replyOutput" partnerLink="ComposerClient" portType="tns:Composer" operation="process" variable="ComposerOutput" />
   </sequence>
</process>